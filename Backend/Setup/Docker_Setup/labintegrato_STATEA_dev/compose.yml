services:

  pma:
    image: phpmyadmin:5.2.0-apache
    platform: linux/amd64
    hostname: pma
    ports:
      - "127.0.0.1:9983:80"
    networks:
      - backend
    environment:
      - PMA_HOST=db
      - PMA_PORT=3306
      - UPLOAD_LIMIT=10M
    restart: always
    depends_on:
      - db
    
  webserver:
    image: stateadev/apache
    platform: linux/amd64
    build: ./webserver/
    hostname: webserver
    ports:
      - "127.0.0.1:9982:80"
    volumes:
    - apache-sites:/var/www/html
    - apache-config:/etc/apache2
    - webserver:/home
    networks:
      - frontend
      - backend
    environment:
      - TZ=Europe/Rome
    restart: always
    depends_on:
      - db

  consumerstats:
    image: stateadev/ubuntu-consumerstats
    platform: linux/amd64
    build: ./ubuntu_consumerstats/
    hostname: consumerstats
    volumes:
    - consumerstats:/home
    networks:
      - backend
    environment:
      - TZ=Europe/Rome
    restart: always
    depends_on:
      - db
      - zookeeper
      - kafka

  producerstats:
    image: stateadev/ubuntu-producerstats
    platform: linux/amd64
    build: ./ubuntu_producerstats/
    hostname: producerstats
    volumes:
    - producerstats:/home
    networks:
      - backend
    environment:
      - TZ=Europe/Rome
    restart: always
    depends_on:
      - zookeeper
      - kafka
      - redis

  consumerforecasts:
    image: stateadev/ubuntu-consumerforecasts
    platform: linux/amd64
    build: ./ubuntu_consumerforecasts/
    hostname: consumerforecasts
    volumes:
    - consumerforecasts:/home
    networks:
      - backend
    environment:
      - TZ=Europe/Rome
    restart: always
    depends_on:
      - db
      - zookeeper
      - kafka

  producerforecasts:
    image: stateadev/ubuntu-producerforecasts
    platform: linux/amd64
    build: ./ubuntu_producerforecasts/
    hostname: producerforecasts
    volumes:
    - producerforecasts:/home
    networks:
      - backend
    environment:
      - TZ=Europe/Rome
    restart: always
    depends_on:
      - zookeeper
      - kafka
      - redis

  db:
    image: mariadb:jammy
    platform: linux/amd64
    hostname: db
    ports:
      - "127.0.0.1:9906:3306"
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend
    environment:
      - MARIADB_ROOT_PASSWORD=test
    restart: always

  zookeeper:
    image: bitnami/zookeeper:3.8.0
    platform: linux/amd64
    hostname: zookeeper
    networks:
      - backend
    environment:
      - ZOO_PORT_NUMBER=2181
      - ZOO_TICK_TIME=2000
      - ZOO_ENABLE_AUTH=yes
      # user that kafka brokers will use to connect to zookeeper
      - ZOO_SERVER_USERS=kafka
      - ZOO_SERVER_PASSWORDS=UkBCKB7qN2Fk3t.W
      - ZOO_CLIENT_USER=kafka
      - ZOO_CLIENT_PASSWORD=UkBCKB7qN2Fk3t.W
      # Heap memory size
      - ZOO_HEAP_SIZE=256
    volumes:
      - zookeeper-data:/bitnami/zookeeper/data
    restart: always

  kafka:
    image: stateadev/kafka
    platform: linux/amd64
    build: ./kafka/
    hostname: kafka
    networks:
      - backend
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ZOOKEEPER_PROTOCOL=SASL
      - KAFKA_ZOOKEEPER_USER=kafka
      - KAFKA_ZOOKEEPER_PASSWORD=UkBCKB7qN2Fk3t.W
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:SSL,CLIENT:SSL
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,CLIENT://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,CLIENT://kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_TLS_CLIENT_AUTH=required
      - KAFKA_CFG_SSL_KEYSTORE_FILENAME=kafka.server.keystore.jks
      - KAFKA_CFG_SSL_KEYSTORE_LOCATION=/bitnami/kafka/config/certs/kafka.keystore.jks
      - KAFKA_CFG_SSL_KEYSTORE_PASSWORD=mimimmi
      - KAFKA_CFG_SSL_KEY_PASSWORD=mimimmi
      - KAFKA_CFG_SSL_TRUSTSTORE_FILENAME=kafka.server.truststore.jks
      - KAFKA_CFG_SSL_TRUSTSTORE_LOCATION=/bitnami/kafka/config/certs/kafka.truststore.jks
      - KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD=mimimmi
      # - KAFKA_CFG_LOG4J_ROOT_LOGLEVEL=DEBUG
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
      - KAFKA_CFG_LOG_CLEANUP_POLICY=delete
      # sets unlimited retention of topic messages
      - KAFKA_CFG_LOG_RETENTION_BYTES=-1
      - KAFKA_CFG_LOG_RETENTION_MS=-1
      # Heap memory size
      - KAFKA_HEAP_OPTS=-Xmx256M -Xms128M
    volumes:
      - kafka-data:/bitnami/kafka/data
    restart: always
    depends_on:
      - zookeeper

  redis:
    image: stateadev/redis
    platform: linux/amd64
    build: ./myredis/
    hostname: redis
    networks:
      - backend
    volumes:
      - redis-data:/data
    restart: always

  fintech:
    image: stateadev/fintech
    platform: linux/amd64
    build: ./fintech/
    hostname: fintech
    ports:
      - "127.0.0.1:9950:5000"
    networks:
      - backend
    restart: always
    depends_on:
      - db

volumes:
  apache-sites:
  apache-config:
  webserver:
  consumerstats:
  producerstats:
  consumerforecasts:
  producerforecasts:
  zookeeper-data:
  kafka-data:
  redis-data:
  db-data:

networks:
  frontend: {}
  backend: {}